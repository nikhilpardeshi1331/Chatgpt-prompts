def process(self, element):
    try:
        # Extract columns from the element
        columns = element.keys()
        logging.info(f"Reading all columns of table: {columns}")

        # Exclude columns from the 'SET' clause
        exclude_columns = ('CUSTOMER_ID', 'ACCOUNT_ID', 'CARD_NUM', 'LINK_CARD_NUM')
        
        # Extract the values for columns that are not excluded
        values = [element[column] for column in columns if column not in exclude_columns]
        logging.info(f"Reading all values of table: {values}")

        # Prepare the 'SET' clause by including only columns that are not excluded
        set_columns = ', '.join([f"{col} = %s" for col in columns if col not in exclude_columns])
        logging.info(f"Reading all set_columns of table: {set_columns}")

        # Define condition columns for the 'WHERE' clause
        condition_columns = ['CUSTOMER_ID', 'ACCOUNT_ID', 'CARD_NUM', 'LINK_CARD_NUM']
        logging.info(f"Reading all condition_columns of table: {condition_columns}")

        # Prepare the 'WHERE' clause using the condition columns
        where_clause = ' AND '.join([f"{col} = %s" for col in condition_columns])
        logging.info(f"Reading all where_clause of table: {where_clause}")

        # Construct the final update query
        update_query = f"""UPDATE {self.tgt_table_name} SET {set_columns} WHERE {where_clause}"""
        logging.info(f"Update table query: {update_query}")

        # Extract values for the WHERE clause (condition columns)
        where_values = [element[col] for col in condition_columns]

        # Combine set values and where values for the query execution
        all_values = values + where_values

        # Execute the query with the provided values
        self.cursor.execute(update_query, all_values)
        logging.info("Updating table...")

        # Commit the transaction
        self.conn.commit()

    except Exception as e:
        logging.error("Failed to update data: %s", str(e))
        self.conn.rollback()  # Rollback in case of an error
        self.updateConfigTable(self.postgres_config, self.uniqueNum, 'FAILED')
        logging.info("Updated PostgreSQL Config table after failed update operation")

        # Optionally raise an error to halt execution
        # raise RuntimeError(f"Update failed for {self.tgt_table_name}") from e
