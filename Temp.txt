import apache_beam as beam
from apache_beam.options.pipeline_options import PipelineOptions, GoogleCloudOptions, StandardOptions
from apache_beam.io.jdbc import ReadFromJdbc
from apache_beam.io import WriteToText

class MyPipelineOptions(PipelineOptions):
    @classmethod
    def _add_argparse_args(cls, parser):
        parser.add_value_provider_argument('--gcs_output_path', type=str, help='GCS Output path for CSV')
        parser.add_value_provider_argument('--jdbc_url', type=str, help='JDBC URL for Postgres')
        parser.add_value_provider_argument('--jdbc_username', type=str, help='Postgres Username')
        parser.add_value_provider_argument('--jdbc_password', type=str, help='Postgres Password')

def run():
    # Set pipeline options
    options = MyPipelineOptions()
    google_cloud_options = options.view_as(GoogleCloudOptions)
    google_cloud_options.project = 'your-gcp-project'
    google_cloud_options.job_name = 'postgres-to-gcs-csv'
    google_cloud_options.staging_location = 'gs://your-bucket/staging'
    google_cloud_options.temp_location = 'gs://your-bucket/temp'
    options.view_as(StandardOptions).runner = 'DataflowRunner'

    # Define SQL query to fetch data from config table
    query = """
    SELECT serial_no_pk, tgt_tab_name, exec_sql_file_path
    FROM config_table
    WHERE status IN ('OPEN', 'FAILED')
    """

    with beam.Pipeline(options=options) as p:
        # Read data from PostgreSQL
        rows = (
            p
            | "Read from PostgreSQL" >> ReadFromJdbc(
                driver_class_name='org.postgresql.Driver',
                jdbc_url=options.jdbc_url,
                query=query,
                username=options.jdbc_username,
                password=options.jdbc_password
            )
        )

        # Convert rows to CSV format
        def format_to_csv(row):
            return ','.join([str(row['serial_no_pk']), row['tgt_tab_name'], row['exec_sql_file_path']])

        csv_lines = (
            rows
            | "Convert to CSV" >> beam.Map(format_to_csv)
        )

        # Write to GCS with a header
        header = 'serial_no_pk,tgt_tab_name,exec_sql_file_path'
        csv_lines | "Write to GCS" >> WriteToText(
            options.gcs_output_path.get(),
            file_name_suffix='.csv',
            header=header
        )

if __name__ == '__main__':
    run()
