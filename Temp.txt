import apache_beam as beam
from apache_beam.options.pipeline_options import PipelineOptions, GoogleCloudOptions
from google.cloud import bigquery

# Define pipeline options
options = PipelineOptions()
gcp_options = options.view_as(GoogleCloudOptions)
gcp_options.project = 'your-gcp-project-id'  # Replace with your GCP project ID
gcp_options.region = 'your-region'  # Replace with your GCP region
gcp_options.job_name = 'create-bigquery-table-job'
gcp_options.staging_location = 'gs://your-bucket/staging'  # Replace with your GCS bucket
gcp_options.temp_location = 'gs://your-bucket/temp'  # Replace with your GCS bucket
options.view_as(GoogleCloudOptions).runner = 'DataflowRunner'  # Use DataflowRunner for GCP

# BigQuery table schema definition
table_schema = {
    'fields': [
        {'name': 'id', 'type': 'INTEGER', 'mode': 'REQUIRED'},
        {'name': 'name', 'type': 'STRING', 'mode': 'NULLABLE'},
        {'name': 'age', 'type': 'INTEGER', 'mode': 'NULLABLE'},
    ]
}

# Function to create BigQuery table
def create_bigquery_table():
    client = bigquery.Client()
    
    # Define dataset and table information
    dataset_id = 'your_dataset_id'  # Replace with your dataset ID
    table_id = 'your_table_id'      # Replace with your table ID
    
    # Build the full table reference
    table_ref = f'{gcp_options.project}.{dataset_id}.{table_id}'
    
    # Create a Table object with the defined schema
    table = bigquery.Table(table_ref, schema=table_schema)
    
    try:
        # Check if the table exists
        client.get_table(table_ref)
        print(f"Table {table_id} already exists.")
    except Exception as e:
        # If the table doesn't exist, create it
        client.create_table(table)
        print(f"Table {table_id} created successfully.")

# Apache Beam pipeline to trigger table creation
def run():
    with beam.Pipeline(options=options) as p:
        # This is a simple step to trigger the BigQuery table creation logic
        (p
         | 'Start Process' >> beam.Create([1])  # A dummy element to trigger the process
         | 'Create BQ Table' >> beam.Map(lambda x: create_bigquery_table())  # Create table step
        )

if __name__ == '__main__':
    run()
