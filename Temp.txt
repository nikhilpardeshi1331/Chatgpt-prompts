import psycopg2
from google.cloud import storage

def read_gcs_file(bucket_name, file_path):
    client = storage.Client()
    bucket = client.get_bucket(bucket_name)
    blob = bucket.blob(file_path)
    return blob.download_as_text()

def load_config_from_gcs(bucket_name, file_path):
    config_content = read_gcs_file(bucket_name, file_path)
    config = {}
    for line in config_content.splitlines():
        key, value = line.split('=')
        config[key.strip()] = value.strip()
    return config

def read_from_config_table(postgres_config):
    try:
        # Connect to PostgreSQL using the provided config
        conn = psycopg2.connect(
            dbname=postgres_config['dbname'],
            user=postgres_config['user'],
            host=postgres_config['host'],
            port=postgres_config['port']
        )
        # Perform the necessary operations here
        # ...
        # For example, return a success message for now
        return "Connection successful"
    except Exception as e:
        print(f"Error connecting to PostgreSQL: {e}")
        return None
    finally:
        if 'conn' in locals() and conn:
            conn.close()

# Example usage:
bucket_name = "your-gcs-bucket-name"
config_file_path = "path/to/paramlist_update.cfg"  # Adjust this path as needed

# Load config from GCS
config = load_config_from_gcs(bucket_name, config_file_path)

# Define PostgreSQL connection parameters
postgres_config = {
    'dbname': config.get('dbname', 'Default'),
    'user': config.get('user', 'Default'),
    'host': config.get('host', 'Default'),
    'port': config.get('port', 'Default')
}

# Connect to PostgreSQL and perform operations
result_dict = read_from_config_table(postgres_config)
print(result_dict)
