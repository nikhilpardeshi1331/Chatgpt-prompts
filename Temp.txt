def process(self, element):
    import psycopg2
    from psycopg2 import sql, errors
    from datetime import datetime
    import apache_beam as beam
    from apache_beam.io.gcp.gcsio import GcsIO

    # Initialize GCSIO
    gcsio = GcsIO()

    # Read the update SQL template if provided
    if self.update_pgs_path:
        with gcsio.open(self.update_pgs_path, 'r') as file:
            update_sql_content = file.read().decode('utf-8')
            logging.info(f"Reading SQL File: {update_sql_content}")

    # Extract columns and values from the element
    columns = element.keys()
    logging.info(f"Reading all columns of table: {columns}")

    values = [element[column] for column in columns if column != 'CUSTOMER_ID']
    logging.info(f"Reading all values of table: {values}")

    # Construct the SET clause by excluding 'CUSTOMER_ID'
    exclude_columns = ['CUSTOMER_ID']
    set_columns = ', '.join([f"{col} = %s" for col in columns if col not in exclude_columns])
    logging.info(f"SET clause: {set_columns}")

    # Construct the WHERE clause using 'CUSTOMER_ID'
    condition_columns = ['CUSTOMER_ID']
    where_clause = ' AND '.join([f"{col} = %s" for col in condition_columns])
    logging.info(f"WHERE clause: {where_clause}")

    # Add 'CUSTOMER_ID' to the list of values for the WHERE clause
    values.append(element['CUSTOMER_ID'])

    try:
        logging.info("Inside Try Block")
        # Format the update query
        update_query = update_sql_content.format(set_columns=set_columns, where_clause=where_clause)
        logging.info(f"Update table query: {update_query}")

        # Execute the update query
        self.cursor.execute(update_query, values)
        self.conn.commit()
        logging.info("Updating table...")

        # Insert status update
        status_query = """
        INSERT INTO public.insert_status (STATUS, Insert_Date, bq_path, error_message)
        VALUES (%s, %s, %s, %s)
        """
        self.cursor.execute(status_query, ('Update Success', datetime.now(), self.bq_path, 'Null'))
        logging.info("Data Updated in status table")
        self.conn.commit()

    except psycopg2.Error as e:
        logging.error(f"psycopg2 Error Occurred: {str(e)}")
        self.conn.rollback()

        # Insert failure status update
        status_query = """
        INSERT INTO public.insert_status (STATUS, Insert_Date, bq_path, error_message)
        VALUES (%s, %s, %s, %s)
        """
        self.cursor.execute(status_query, ('Update Failure', datetime.now(), self.bq_path, str(e)))
        self.conn.commit()
